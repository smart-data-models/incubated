{
  "$schema": "http://json-schema.org/schema#",
  "$schemaVersion": "1.0.2",
  "modelTags": "ESHUV",
  "derivedFrom": "",
  "license": "",
  "$id": "https://raw.githubusercontent.com/smart-data-models/dataModel.MarineTransport/master/PortCallEvent/schema.json",
  "title": "Smart Data model PortCallEvent schema",
  "description": "The data model is intended to provide information the events during the PortCall as defined by the international task force Port Call Optimization https://portcalloptimization.org/. It allows to represent almost all events that occur during a PortCall in a simple way. For each event, a context information can be added to inform of simple facts of the event, but the events must have public information only because they are created to improve the works of port community and each event will be sent to all stakeholders. Suggested format: urn:mrn:<oid>:portcalls:portcallevent:id:9999 x. ",

  "type": "object",
  "allOf": [
    {
      "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/GSMA-Commons"
    },
    {
      "properties": {
        "type": {
          "type": "string",
          "description": "Property. NGSI Entity type. It has to be PortCallEvent",
          "enum": [
            "PortCallEvent"
          ]
        },
        "mrn": {
          "type": "string",
          "description": "Property. Unique identifier of the entity. Suggested format: urn:mrn:<oid>:portcalls:portcallevent:id:9999"
        },
        "eventContext": {
          "type": "string",
          "$ref": "#/definitions/IEventContext",
          "description": "EventContext is a key-value object in which users are allowed to put custom keys for any purposes\nThe following keys have pre-defined meanings within the spec\nKeys in this object are always optional"
        },
        "eventTime": {
          "description": "Time at which the event occured/will occur. The meaning of this should be interperted according to eventType",
          "format": "date-time",
          "type": "string"
        },
        "eventType": {
          "type": "string",
          "description": "Port Call Optimization event type. Each event type has 3 parts dot-separated: 1) the subject of event; 2) the type event, that is, a timed action (e-estimated, r-requested, p-planned, a-actual)-t-(a-arrival or d-departure) or other (ets/etc of operation) and 3) the information provider",
          "enum": [
            "120nm.ata.vessel",
            "12nm.ata.vessel",
            "240nm.ata.vessel",
            "60nm.ata.vessel",
            "anchorArea.ata.agent",
            "anchorArea.ata.portAuthority",
            "anchorArea.ata.vessel",
            "anchorArea.atd.agent",
            "anchorArea.atd.portAuthority",
            "anchorArea.atd.vessel",
            "anchorArea.eta.agent",
            "anchorArea.eta.carrier",
            "anchorArea.eta.portAuthority",
            "anchorArea.etd.agent",
            "anchorArea.etd.carrier",
            "anchorArea.etd.portAuthority",
            "berth.ata.agent",
            "berth.ata.carrier",
            "berth.ata.portAuthority",
            "berth.ata.terminal",
            "berth.ata.vessel",
            "berth.atd.agent",
            "berth.atd.carrier",
            "berth.atd.portAuthority",
            "berth.atd.terminal",
            "berth.atd.vessel",
            "berth.cancel.agent",
            "berth.cancel.carrier",
            "berth.cancel.portAuthority",
            "berth.cancel.terminal",
            "berth.eta.agent",
            "berth.eta.captain",
            "berth.eta.carrier",
            "berth.eta.pilot",
            "berth.eta.portAuthority",
            "berth.eta.terminal",
            "berth.eta.vessel",
            "berth.etd.agent",
            "berth.etd.carrier",
            "berth.etd.pilot",
            "berth.etd.portAuthority",
            "berth.etd.terminal",
            "berth.pta.terminal",
            "berth.ptd.portAuthority",
            "berth.ptd.terminal",
            "bunkerPW.atc.vessel",
            "bunkerPW.ats.vessel",
            "bunkerService.atc.bunkerService",
            "bunkerService.atc.portAuthority",
            "bunkerService.atc.serviceProvider",
            "bunkerService.atc.vessel",
            "bunkerService.ats.bunkerService",
            "bunkerService.ats.portAuthority",
            "bunkerService.ats.serviceProvider",
            "bunkerService.ats.vessel",
            "bunkerService.cancel.agent",
            "bunkerService.cancel.bunkerService",
            "bunkerService.cancel.portAuthority",
            "bunkerService.cancel.serviceProvider",
            "bunkerService.etc.agent",
            "bunkerService.etc.bunkerService",
            "bunkerService.etc.serviceProvider",
            "bunkerService.ets.agent",
            "bunkerService.ets.bunkerService",
            "bunkerService.ets.serviceProvider",
            "cargoOperations.atc.terminal",
            "cargoOperations.ats.terminal",
            "cargoOperations.cancel.agent",
            "cargoOperations.cancel.serviceProvider",
            "cargoOperations.etc.agent",
            "cargoOperations.etc.serviceProvider",
            "cargoOperations.etc.terminal",
            "cargoOperations.ets.agent",
            "cargoOperations.ets.serviceProvider",
            "cargoOperations.ets.terminal",
            "customs.atc.vessel",
            "customs.ats.vessel",
            "fairway.ata.vessel",
            "firstLineReleased.at.linesmen",
            "firstLineReleased.at.vessel",
            "firstLineSecured.at.linesmen",
            "firstLineSecured.at.vessel",
            "floatingCrane.atc.vessel",
            "floatingCrane.ats.vessel",
            "immigration.atc.vessel",
            "immigration.ats.vessel",
            "lastLineReleased.at.linesmen",
            "lastLineReleased.at.vessel",
            "lastLineSecured.at.linesmen",
            "lastLineSecured.at.vessel",
            "movement.cancel.agent",
            "pilotBoardingPlace.ata.carrier",
            "pilotBoardingPlace.ata.vessel",
            "pilotBoardingPlace.atd.carrier",
            "pilotBoardingPlace.atd.vessel",
            "pilotBoardingPlace.eta.agent",
            "pilotBoardingPlace.eta.carrier",
            "pilotBoardingPlace.eta.pilot",
            "pilotBoardingPlace.eta.vessel",
            "pilotBoardingPlace.etd.agent",
            "pilotBoardingPlace.etd.carrier",
            "pilotBoardingPlace.pta.portAuthority",
            "pilotDisembarked.at.pilot",
            "pilotDisembarked.at.portAuthority",
            "pilotDisembarked.at.vessel",
            "pilotDisembarked.et.pilot",
            "pilotOnBoard.at.pilot",
            "pilotOnBoard.at.portAuthority",
            "pilotOnBoard.at.vessel",
            "pilotOnBoard.et.pilot",
            "port.ata.agent",
            "port.ata.carrier",
            "port.ata.portAuthority",
            "port.ata.vessel",
            "port.atd.agent",
            "port.atd.carrier",
            "port.atd.portAuthority",
            "port.atd.vessel",
            "port.cancel.agent",
            "port.cancel.carrier",
            "port.cancel.portAuthority",
            "port.clearance.portAuthority",
            "port.eta.agent",
            "port.eta.carrier",
            "port.eta.portAuthority",
            "port.etd.agent",
            "port.etd.carrier",
            "port.etd.portAuthority",
            "portAuthority.atc.vessel",
            "portAuthority.ats.vessel",
            "portBasin.ata.vessel",
            "provision.atc.serviceProvider",
            "provision.atc.vessel",
            "provision.ats.serviceProvider",
            "provision.ats.vessel",
            "provision.cancel.serviceProvider",
            "provision.etc.serviceProvider",
            "provision.ets.serviceProvider",
            "repairService.atc.serviceProvider",
            "repairService.ats.serviceProvider",
            "repairService.cancel.agent",
            "repairService.etc.agent",
            "repairService.etc.serviceProvider",
            "repairService.ets.agent",
            "repairService.ets.serviceProvider",
            "safeAccessToShoreOpen.et.pilot",
            "slops.atc.vessel",
            "slops.ats.vessel",
            "slops.cancel.agent",
            "slops.cancel.serviceProvider",
            "slops.etc.agent",
            "slops.etc.serviceProvider",
            "slops.ets.agent",
            "slops.ets.serviceProvider",
            "stores.cancel.agent",
            "stores.cancel.serviceProvider",
            "stores.etc.agent",
            "stores.etc.serviceProvider",
            "stores.ets.agent",
            "stores.ets.serviceProvider",
            "surveyor.atc.terminal",
            "surveyor.ats.terminal",
            "surveyor.cancel.serviceProvider",
            "surveyor.etc.serviceProvider",
            "surveyor.ets.serviceProvider",
            "tender.atc.vessel",
            "tender.ats.vessel",


            "tugsNoMoreStandby.at.portAuthority",
            "tugsNoMoreStandby.at.vessel",
            "tugsNoMoreStandby.et.portAuthority",
            "tugsNoMoreStandby.et.tugService",


            "tugsStandby.at.portAuthority",
            "tugsStandby.at.vessel",
            "tugsStandby.et.portAuthority",


            "tugsFromBerth.reportnumber.agent",
            "tugsFromBerth.reportnumber.portAuthority",
            "tugsToBerth.reportnumber.agent",
            "tugsToBerth.reportnumber.portAuthority",


            "vtsArea.ata.vessel",
            "vtsArea.atd.vessel",
            "waste.atc.serviceProvider",
            "waste.atc.vessel",
            "waste.ats.serviceProvider",
            "waste.ats.vessel",
            "waste.cancel.agent",
            "waste.cancel.serviceProvider",
            "waste.etc.agent",
            "waste.etc.serviceProvider",
            "waste.ets.agent",
            "waste.ets.serviceProvider",
            "waterSupply.cancel.agent",
            "waterSupply.cancel.serviceProvider",
            "waterSupply.etc.agent",
            "waterSupply.etc.serviceProvider",
            "waterSupply.ets.agent",
            "waterSupply.ets.serviceProvider"
          ]
        },
        "locationType": {
          "type": "string",
          "description": "Specifies the type of location",
          "enum": [
            "anchorArea",
            "approachArea",
            "berth",
            "fairway",
            "pilotBoardingPlace",
            "port",
            "portBasin",
            "terminal",
            "tugArea"
          ],
          "type": "string"
        },
        "location": {
          "type": "location",
          "description": "Identifies a physical location at which the event will take place"
        },
        "port": {
          "description": "A UN/LOCODE designating a port",
          "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
          "type": "string"
        },
        "portcallId": {
          "description": "A local port call identifier issued by the port authority or an organisation authorized by the port authority\nMust be prefixed by the UNLOCODE of the issuing port, and followed by an identifier of 1 to 32 characters\nAllowed characters in the identifier: a-z and A-Z (basic latin block letters), 0-9 (basic latin block digits), - (U+002D) and _ (U+005F)",
          "pattern": "^[A-Z]{2}[A-Z2-9]{3}[a-zA-Z0-9\\-_]{1,32}$",
          "type": "string"
        },
        "recordTime": {
          "description": "Time at which the event was created",
          "format": "date-time",
          "type": "string"
        },
        "shipRef": {
          "type": "Relationship",
          "description": "Relationship.Reference to PortCallVessel entity."
        },
        "source": {
          "type": "string",
          "description": "System creating the event, unique within participants"
        },
        "uuid": {
          "type": "string",
          "description": "UUID identifying the event. Format: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$' "
        },
        "version": {
          "description": "Follows semantic versioning, see https://semver.org",
          "enum": [
            "3.2.1"
          ],
          "type": "string"
        }

      }
    }
  ],
  "required": [
    "id",
    "type",
    "eventTime",
    "eventType",
    "port",
    "recordTime",
    "ship"
  ]
}
