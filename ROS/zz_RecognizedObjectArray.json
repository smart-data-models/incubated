{
  "header": {
    "type": "object",
    "properties": {
      "seq": {
        "type": "integer",
        "minimum": 0,
        "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
      },
      "stamp": {
        "type": "string",
        "format": "date-time",
        "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
      },
      "frame_id": {
        "type": "string",
        "description": "Property. Frame this data is associated with "
      }
    }
  },
  "objects": {
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "header": {
          "type": "object",
          "properties": {
            "seq": {
              "type": "integer",
              "minimum": 0,
              "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
            },
            "stamp": {
              "type": "string",
              "format": "date-time",
              "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
            },
            "frame_id": {
              "type": "string",
              "description": "Property. Frame this data is associated with "
            }
          }
        },
        "type": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "Property. ################################################# OBJECT ID #########################################################  Contains information about the type of a found object. Those two sets of parameters together uniquely define an  object  The key of the found object: the unique identifier in the given db "
            },
            "db": {
              "type": "string",
              "description": "Property.  The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding  database. E.g., in object_recognition, it can look like: \"{'type':'CouchDB', 'root':'http://localhost'}\"  There is no conventional format for those parameters and it's nice to keep that flexibility.  The object_recognition_core as a generic DB type that can read those fields  Current examples:  For CouchDB:  type: 'CouchDB'  root: 'http://localhost:5984'  collection: 'object_recognition'  For SQL household database:  type: 'SqlHousehold'  host: 'wgs36'  port: 5432  user: 'willow'  password: 'willow'  name: 'household_objects'  module: 'tabletop' "
            }
          }
        },
        "confidence": {
          "type": "number",
          "description": "Property. confidence: how sure you are it is that object and not another one.  It is between 0 and 1 and the closer to one it is the better "
        },
        "point_clouds": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "header": {
                "type": "object",
                "properties": {
                  "seq": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
                  },
                  "stamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
                  },
                  "frame_id": {
                    "type": "string",
                    "description": "Property. Frame this data is associated with "
                  }
                }
              },
              "height": {
                "type": "integer",
                "minimum": 0,
                "description": "Property.  2D structure of the point cloud. If the cloud is unordered, height is  1 and width is the length of the point cloud. "
              },
              "width": {
                "type": "integer",
                "minimum": 0,
                "description": "Property. "
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "datatype": {
                      "type": "string",
                      "enum": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "description": "Property.  Name of field "
                    },
                    "offset": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Property.  Offset from start of point struct "
                    },
                    "count": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Property.  How many elements in the field "
                    }
                  }
                }
              },
              "is_bigendian": {
                "type": "boolean",
                "description": "Property.  Is this data bigendian? "
              },
              "point_step": {
                "type": "integer",
                "minimum": 0,
                "description": "Property.  Length of a point in bytes "
              },
              "row_step": {
                "type": "integer",
                "minimum": 0,
                "description": "Property.  Length of a row in bytes "
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 255
                }
              },
              "is_dense": {
                "type": "boolean",
                "description": "Property.  True if there are no invalid points "
              }
            }
          }
        },
        "bounding_mesh": {
          "type": "object",
          "properties": {
            "triangles": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "vertex_indices": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "maxitems": 3
                  }
                }
              }
            },
            "vertices": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "x": {
                    "type": "number",
                    "description": "Property.  This contains the position of a point in free space "
                  },
                  "y": {
                    "type": "number",
                    "description": "Property. "
                  },
                  "z": {
                    "type": "number",
                    "description": "Property. "
                  }
                }
              }
            }
          }
        },
        "bounding_contours": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "Property.  This contains the position of a point in free space "
              },
              "y": {
                "type": "number",
                "description": "Property. "
              },
              "z": {
                "type": "number",
                "description": "Property. "
              }
            }
          }
        },
        "pose": {
          "type": "object",
          "properties": {
            "header": {
              "type": "object",
              "properties": {
                "seq": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
                },
                "stamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
                },
                "frame_id": {
                  "type": "string",
                  "description": "Property. Frame this data is associated with "
                }
              }
            },
            "pose": {
              "type": "object",
              "properties": {
                "pose": {
                  "type": "object",
                  "properties": {
                    "position": {
                      "type": "object",
                      "properties": {
                        "x": {
                          "type": "number",
                          "description": "Property.  This contains the position of a point in free space "
                        },
                        "y": {
                          "type": "number",
                          "description": "Property. "
                        },
                        "z": {
                          "type": "number",
                          "description": "Property. "
                        }
                      }
                    },
                    "orientation": {
                      "type": "object",
                      "properties": {
                        "x": {
                          "type": "number",
                          "description": "Property.  This represents an orientation in free space in quaternion form. "
                        },
                        "y": {
                          "type": "number",
                          "description": "Property. "
                        },
                        "z": {
                          "type": "number",
                          "description": "Property. "
                        },
                        "w": {
                          "type": "number",
                          "description": "Property. "
                        }
                      }
                    }
                  }
                },
                "covariance": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "maxitems": 36
                }
              }
            }
          }
        }
      }
    }
  },
  "cooccurrence": {
    "type": "array",
    "items": {
      "type": "number"
    }
  }
}