{
  "server_id": {
    "type": "string",
    "description": "Property.  Identifying string. Must be unique in the topic namespace  that this server works on. "
  },
  "seq_num": {
    "type": "integer",
    "minimum": 0,
    "description": "Property.  Sequence number.  The client will use this to detect if it has missed a subsequent  update. Every update message will have the same sequence number as  an init message. Clients will likely want to unsubscribe from the  init topic after a successful initialization to avoid receiving  duplicate data. "
  },
  "markers": {
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "header": {
          "type": "object",
          "properties": {
            "seq": {
              "type": "integer",
              "minimum": 0,
              "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
            },
            "stamp": {
              "type": "string",
              "format": "date-time",
              "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
            },
            "frame_id": {
              "type": "string",
              "description": "Property. Frame this data is associated with "
            }
          }
        },
        "pose": {
          "type": "object",
          "properties": {
            "position": {
              "type": "object",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "Property.  This contains the position of a point in free space "
                },
                "y": {
                  "type": "number",
                  "description": "Property. "
                },
                "z": {
                  "type": "number",
                  "description": "Property. "
                }
              }
            },
            "orientation": {
              "type": "object",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "Property.  This represents an orientation in free space in quaternion form. "
                },
                "y": {
                  "type": "number",
                  "description": "Property. "
                },
                "z": {
                  "type": "number",
                  "description": "Property. "
                },
                "w": {
                  "type": "number",
                  "description": "Property. "
                }
              }
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Property.  Identifying string. Must be globally unique in  the topic that this message is sent through. "
        },
        "description": {
          "type": "string",
          "description": "Property.  Short description (< 40 characters). "
        },
        "scale": {
          "type": "number",
          "description": "Property.  Scale to be used for default controls (default = 1). "
        },
        "menu_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 0,
                "description": "Property.  MenuEntry message.  Each InteractiveMarker message has an array of MenuEntry messages.  A collection of MenuEntries together describe a  menu/submenu/subsubmenu/etc tree, though they are stored in a flat  array. The tree structure is represented by giving each menu entry  an ID number and a \"parent_id\" field. Top-level entries are the  ones with parent_id = 0. Menu entries are ordered within their  level the same way they are ordered in the containing array. Parent  entries must appear before their children.  Example:  - id = 3  parent_id = 0  title = \"fun\"  - id = 2  parent_id = 0  title = \"robot\"  - id = 4  parent_id = 2  title = \"pr2\"  - id = 5  parent_id = 2  title = \"turtle\"   Gives a menu tree like this:  - fun  - robot  - pr2  - turtle  ID is a number for each menu entry. Must be unique within the  control, and should never be 0. "
              },
              "parent_id": {
                "type": "integer",
                "minimum": 0,
                "description": "Property.  ID of the parent of this menu entry, if it is a submenu. If this  menu entry is a top-level entry, set parent_id to 0. "
              },
              "title": {
                "type": "string",
                "description": "Property.  menu / entry title "
              },
              "command": {
                "type": "string",
                "description": "Property.  Arguments to command indicated by command_type (below) "
              },
              "command_type": {
                "type": "integer",
                "minimum": 0,
                "maximum": 255,
                "description": "Property.  Command_type stores the type of response desired when this menu  entry is clicked.  FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry's id.  ROSRUN: execute \"rosrun\" with arguments given in the command field (above).  ROSLAUNCH: execute \"roslaunch\" with arguments given in the command field (above). "
              }
            }
          }
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Property.  Represents a control that is to be displayed together with an interactive marker  Identifying string for this control.  You need to assign a unique value to this to receive feedback from the GUI  on what actions the user performs on this control (e.g. a button click). "
              },
              "orientation": {
                "type": "string",
                "enum": [
                  "0",
                  "1",
                  "2"
                ]
              },
              "orientation_mode": {
                "type": "string",
                "enum": [
                  "0",
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9"
                ]
              },
              "interaction_mode": {
                "type": "integer",
                "minimum": 0,
                "maximum": 255,
                "description": "Property.  Interaction mode for this control   NONE: This control is only meant for visualization; no context menu.  MENU: Like NONE, but right-click menu is active.  BUTTON: Element can be left-clicked.  MOVE_AXIS: Translate along local x-axis.  MOVE_PLANE: Translate in local y-z plane.  ROTATE_AXIS: Rotate around local x-axis.  MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.  \"3D\" interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.  MOVE_3D: Translate freely in 3D space.  ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.  MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor origin. "
              },
              "always_visible": {
                "type": "boolean",
                "description": "Property.  If true, the contained markers will also be visible  when the gui is not in interactive mode. "
              },
              "markers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "shape": {
                      "type": "string",
                      "enum": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "10",
                        "11"
                      ]
                    },
                    "operation": {
                      "type": "string",
                      "enum": [
                        "0",
                        "0",
                        "2",
                        "3"
                      ]
                    },
                    "header": {
                      "type": "object",
                      "properties": {
                        "seq": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
                        },
                        "stamp": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
                        },
                        "frame_id": {
                          "type": "string",
                          "description": "Property. Frame this data is associated with "
                        }
                      }
                    },
                    "ns": {
                      "type": "string",
                      "description": "Property.  Namespace to place this object in... used in conjunction with id to create a unique name for the object "
                    },
                    "id": {
                      "type": "integer",
                      "description": "Property.  object ID useful in conjunction with the namespace for manipulating and deleting the object later "
                    },
                    "type": {
                      "type": "integer",
                      "description": "Property.  Type of object "
                    },
                    "action": {
                      "type": "integer",
                      "description": "Property.  0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects "
                    },
                    "pose": {
                      "type": "object",
                      "properties": {
                        "position": {
                          "type": "object",
                          "properties": {
                            "x": {
                              "type": "number",
                              "description": "Property.  This contains the position of a point in free space "
                            },
                            "y": {
                              "type": "number",
                              "description": "Property. "
                            },
                            "z": {
                              "type": "number",
                              "description": "Property. "
                            }
                          }
                        },
                        "orientation": {
                          "type": "object",
                          "properties": {
                            "x": {
                              "type": "number",
                              "description": "Property.  This represents an orientation in free space in quaternion form. "
                            },
                            "y": {
                              "type": "number",
                              "description": "Property. "
                            },
                            "z": {
                              "type": "number",
                              "description": "Property. "
                            },
                            "w": {
                              "type": "number",
                              "description": "Property. "
                            }
                          }
                        }
                      }
                    },
                    "scale": {
                      "type": "object",
                      "properties": {
                        "x": {
                          "type": "number",
                          "description": "Property.  This represents a vector in free space.  It is only meant to represent a direction. Therefore, it does not  make sense to apply a translation to it (e.g., when applying a  generic rigid transformation to a Vector3, tf2 will only apply the  rotation). If you want your data to be translatable too, use the  geometry_msgs/Point message instead. "
                        },
                        "y": {
                          "type": "number",
                          "description": "Property. "
                        },
                        "z": {
                          "type": "number",
                          "description": "Property. "
                        }
                      }
                    },
                    "color": {
                      "type": "object",
                      "properties": {
                        "r": {
                          "type": "number",
                          "description": "Property. "
                        },
                        "g": {
                          "type": "number",
                          "description": "Property. "
                        },
                        "b": {
                          "type": "number",
                          "description": "Property. "
                        },
                        "a": {
                          "type": "number",
                          "description": "Property. "
                        }
                      }
                    },
                    "lifetime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Property.  How long the object should last before being automatically deleted. 0 means forever "
                    },
                    "frame_locked": {
                      "type": "boolean",
                      "description": "Property.  If this marker should be frame-locked, i.e. retransformed into its frame every timestep "
                    },
                    "points": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "x": {
                            "type": "number",
                            "description": "Property.  This contains the position of a point in free space "
                          },
                          "y": {
                            "type": "number",
                            "description": "Property. "
                          },
                          "z": {
                            "type": "number",
                            "description": "Property. "
                          }
                        }
                      }
                    },
                    "colors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "r": {
                            "type": "number",
                            "description": "Property. "
                          },
                          "g": {
                            "type": "number",
                            "description": "Property. "
                          },
                          "b": {
                            "type": "number",
                            "description": "Property. "
                          },
                          "a": {
                            "type": "number",
                            "description": "Property. "
                          }
                        }
                      }
                    },
                    "text": {
                      "type": "string",
                      "description": "Property.  NOTE: only used for text markers "
                    },
                    "mesh_resource": {
                      "type": "string",
                      "description": "Property.  NOTE: only used for MESH_RESOURCE markers "
                    },
                    "mesh_use_embedded_materials": {
                      "type": "boolean",
                      "description": "Property. "
                    }
                  }
                }
              },
              "independent_marker_orientation": {
                "type": "boolean",
                "description": "Property.  In VIEW_FACING mode, set this to true if you don't want the markers  to be aligned with the camera view point. The markers will show up  as in INHERIT mode. "
              },
              "description": {
                "type": "string",
                "description": "Property.  Short description (< 40 characters) of what this control does,  e.g. \"Move the robot\".  Default: A generic description based on the interaction mode "
              }
            }
          }
        }
      }
    }
  }
}