{
  "name": {
    "type": "string",
    "description": "Property. ############################################# VISUALIZATION INFO ###################################################### ################## THIS INFO SHOULD BE OBTAINED INDEPENDENTLY FROM THE CORE, LIKE IN AN RVIZ PLUGIN ###################  The human readable name of the object "
  },
  "ground_truth_mesh": {
    "type": "object",
    "properties": {
      "triangles": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "vertex_indices": {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "maxitems": 3
            }
          }
        }
      },
      "vertices": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "x": {
              "type": "number",
              "description": "Property.  This contains the position of a point in free space "
            },
            "y": {
              "type": "number",
              "description": "Property. "
            },
            "z": {
              "type": "number",
              "description": "Property. "
            }
          }
        }
      }
    }
  },
  "ground_truth_point_cloud": {
    "type": "object",
    "properties": {
      "header": {
        "type": "object",
        "properties": {
          "seq": {
            "type": "integer",
            "minimum": 0,
            "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
          },
          "stamp": {
            "type": "string",
            "format": "date-time",
            "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
          },
          "frame_id": {
            "type": "string",
            "description": "Property. Frame this data is associated with "
          }
        }
      },
      "height": {
        "type": "integer",
        "minimum": 0,
        "description": "Property.  2D structure of the point cloud. If the cloud is unordered, height is  1 and width is the length of the point cloud. "
      },
      "width": {
        "type": "integer",
        "minimum": 0,
        "description": "Property. "
      },
      "fields": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "datatype": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8"
              ]
            },
            "name": {
              "type": "string",
              "description": "Property.  Name of field "
            },
            "offset": {
              "type": "integer",
              "minimum": 0,
              "description": "Property.  Offset from start of point struct "
            },
            "count": {
              "type": "integer",
              "minimum": 0,
              "description": "Property.  How many elements in the field "
            }
          }
        }
      },
      "is_bigendian": {
        "type": "boolean",
        "description": "Property.  Is this data bigendian? "
      },
      "point_step": {
        "type": "integer",
        "minimum": 0,
        "description": "Property.  Length of a point in bytes "
      },
      "row_step": {
        "type": "integer",
        "minimum": 0,
        "description": "Property.  Length of a row in bytes "
      },
      "data": {
        "type": "array",
        "items": {
          "type": "integer",
          "minimum": 0,
          "maximum": 255
        }
      },
      "is_dense": {
        "type": "boolean",
        "description": "Property.  True if there are no invalid points "
      }
    }
  }
}