{
  "target_radius": {
    "type": "number",
    "description": "Property.  The constraint is useful to maintain visibility to a disc (the target) in a particular frame.  This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.  Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.  Note:  This constraint does NOT enforce minimum or maximum distances between the sensor  and the target, nor does it enforce the target to be in the field of view of  the sensor. A PositionConstraint can (and probably should) be used for such purposes.  The radius of the disc that should be maintained visible "
  },
  "target_pose": {
    "type": "object",
    "properties": {
      "header": {
        "type": "object",
        "properties": {
          "seq": {
            "type": "integer",
            "minimum": 0,
            "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
          },
          "stamp": {
            "type": "string",
            "format": "date-time",
            "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
          },
          "frame_id": {
            "type": "string",
            "description": "Property. Frame this data is associated with "
          }
        }
      },
      "pose": {
        "type": "object",
        "properties": {
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "Property.  This contains the position of a point in free space "
              },
              "y": {
                "type": "number",
                "description": "Property. "
              },
              "z": {
                "type": "number",
                "description": "Property. "
              }
            }
          },
          "orientation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "Property.  This represents an orientation in free space in quaternion form. "
              },
              "y": {
                "type": "number",
                "description": "Property. "
              },
              "z": {
                "type": "number",
                "description": "Property. "
              },
              "w": {
                "type": "number",
                "description": "Property. "
              }
            }
          }
        }
      }
    }
  },
  "cone_sides": {
    "type": "integer",
    "description": "Property.  From the sensor origin towards the target, the disc forms a visibility cone  This cone is approximated using many sides. For example, when using 4 sides,  that in fact makes the visibility region be a pyramid.  This value should always be 3 or more. "
  },
  "sensor_pose": {
    "type": "object",
    "properties": {
      "header": {
        "type": "object",
        "properties": {
          "seq": {
            "type": "integer",
            "minimum": 0,
            "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
          },
          "stamp": {
            "type": "string",
            "format": "date-time",
            "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
          },
          "frame_id": {
            "type": "string",
            "description": "Property. Frame this data is associated with "
          }
        }
      },
      "pose": {
        "type": "object",
        "properties": {
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "Property.  This contains the position of a point in free space "
              },
              "y": {
                "type": "number",
                "description": "Property. "
              },
              "z": {
                "type": "number",
                "description": "Property. "
              }
            }
          },
          "orientation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "Property.  This represents an orientation in free space in quaternion form. "
              },
              "y": {
                "type": "number",
                "description": "Property. "
              },
              "z": {
                "type": "number",
                "description": "Property. "
              },
              "w": {
                "type": "number",
                "description": "Property. "
              }
            }
          }
        }
      }
    }
  },
  "max_view_angle": {
    "type": "number",
    "description": "Property.  Even though the disc is maintained visible, the visibility cone can be very small  because of the orientation of the disc with respect to the sensor. It is possible  for example to view the disk almost from a side, in which case the visibility cone  can end up having close to 0 volume. The view angle is defined to be the angle between  the normal to the visibility disc and the direction vector from the sensor origin.  The value below represents the minimum desired view angle. For a perfect view,  this value will be 0 (the two vectors are exact opposites). For a completely obstructed view  this value will be Pi/2 (the vectors are perpendicular). This value defined below  is the maximum view angle to be maintained. This should be a value in the open interval  (0, Pi/2). If 0 is set, the view angle is NOT enforced. "
  },
  "max_range_angle": {
    "type": "number",
    "description": "Property.  This angle is used similarly to max_view_angle but limits the maximum angle  between the sensor origin direction vector and the axis that connects the  sensor origin to the target frame origin. The value is again in the range (0, Pi/2)  and is NOT enforced if set to 0. "
  },
  "sensor_view_direction": {
    "type": "string",
    "enum": [
      "0",
      "1",
      "2"
    ]
  },
  "weight": {
    "type": "number",
    "description": "Property.  A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important) "
  }
}