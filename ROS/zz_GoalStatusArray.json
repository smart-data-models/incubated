{
  "header": {
    "type": "object",
    "properties": {
      "seq": {
        "type": "integer",
        "minimum": 0,
        "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
      },
      "stamp": {
        "type": "string",
        "format": "date-time",
        "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
      },
      "frame_id": {
        "type": "string",
        "description": "Property. Frame this data is associated with "
      }
    }
  },
  "status_list": {
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "goal_id": {
          "type": "object",
          "properties": {
            "stamp": {
              "type": "string",
              "format": "date-time",
              "description": "Property.  The stamp should store the time at which this goal was requested.  It is used by an action server when it tries to preempt all  goals that were requested before a certain time "
            },
            "id": {
              "type": "string",
              "description": "Property.  The id provides a way to associate feedback and  result message with specific goal requests. The id  specified must be unique. "
            }
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9"
          ]
        },
        "text": {
          "type": "string",
          "description": "Property.  The goal has yet to be processed by the action server  The goal is currently being processed by the action server  The goal received a cancel request after it started executing  and has since completed its execution (Terminal State)  The goal was achieved successfully by the action server (Terminal State)  The goal was aborted during execution by the action server due  to some failure (Terminal State)  The goal was rejected by the action server without being processed,  because the goal was unattainable or invalid (Terminal State)  The goal received a cancel request after it started executing  and has not yet completed execution  The goal received a cancel request before it started executing,  but the action server has not yet confirmed that the goal is canceled  The goal received a cancel request before it started executing  and was successfully cancelled (Terminal State)  An action client can determine that a goal is LOST. This should not be  sent over the wire by an action server Allow for the user to associate a string with GoalStatus for debugging "
        }
      }
    }
  }
}