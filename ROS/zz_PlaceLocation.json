{
  "id": {
    "type": "string",
    "description": "Property.  A name for this grasp "
  },
  "post_place_posture": {
    "type": "object",
    "properties": {
      "header": {
        "type": "object",
        "properties": {
          "seq": {
            "type": "integer",
            "minimum": 0,
            "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
          },
          "stamp": {
            "type": "string",
            "format": "date-time",
            "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
          },
          "frame_id": {
            "type": "string",
            "description": "Property. Frame this data is associated with "
          }
        }
      },
      "joint_names": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "points": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "positions": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "velocities": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "accelerations": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "effort": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "time_from_start": {
              "type": "string",
              "format": "date-time",
              "description": "Property. "
            }
          }
        }
      }
    }
  },
  "place_pose": {
    "type": "object",
    "properties": {
      "header": {
        "type": "object",
        "properties": {
          "seq": {
            "type": "integer",
            "minimum": 0,
            "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
          },
          "stamp": {
            "type": "string",
            "format": "date-time",
            "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
          },
          "frame_id": {
            "type": "string",
            "description": "Property. Frame this data is associated with "
          }
        }
      },
      "pose": {
        "type": "object",
        "properties": {
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "Property.  This contains the position of a point in free space "
              },
              "y": {
                "type": "number",
                "description": "Property. "
              },
              "z": {
                "type": "number",
                "description": "Property. "
              }
            }
          },
          "orientation": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "Property.  This represents an orientation in free space in quaternion form. "
              },
              "y": {
                "type": "number",
                "description": "Property. "
              },
              "z": {
                "type": "number",
                "description": "Property. "
              },
              "w": {
                "type": "number",
                "description": "Property. "
              }
            }
          }
        }
      }
    }
  },
  "quality": {
    "type": "number",
    "description": "Property.  The estimated probability of success for this place, or some other  measure of how \"good\" it is. "
  },
  "pre_place_approach": {
    "type": "object",
    "properties": {
      "direction": {
        "type": "object",
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "seq": {
                "type": "integer",
                "minimum": 0,
                "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
              },
              "stamp": {
                "type": "string",
                "format": "date-time",
                "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
              },
              "frame_id": {
                "type": "string",
                "description": "Property. Frame this data is associated with "
              }
            }
          },
          "vector": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "Property.  This represents a vector in free space.  It is only meant to represent a direction. Therefore, it does not  make sense to apply a translation to it (e.g., when applying a  generic rigid transformation to a Vector3, tf2 will only apply the  rotation). If you want your data to be translatable too, use the  geometry_msgs/Point message instead. "
              },
              "y": {
                "type": "number",
                "description": "Property. "
              },
              "z": {
                "type": "number",
                "description": "Property. "
              }
            }
          }
        }
      },
      "desired_distance": {
        "type": "number",
        "description": "Property.  the desired translation distance "
      },
      "min_distance": {
        "type": "number",
        "description": "Property.  the min distance that must be considered feasible before the  grasp is even attempted "
      }
    }
  },
  "post_place_retreat": {
    "type": "object",
    "properties": {
      "direction": {
        "type": "object",
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "seq": {
                "type": "integer",
                "minimum": 0,
                "description": "Property.  Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data  in a particular coordinate frame.   sequence ID: consecutively increasing ID "
              },
              "stamp": {
                "type": "string",
                "format": "date-time",
                "description": "Property. Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library "
              },
              "frame_id": {
                "type": "string",
                "description": "Property. Frame this data is associated with "
              }
            }
          },
          "vector": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number",
                "description": "Property.  This represents a vector in free space.  It is only meant to represent a direction. Therefore, it does not  make sense to apply a translation to it (e.g., when applying a  generic rigid transformation to a Vector3, tf2 will only apply the  rotation). If you want your data to be translatable too, use the  geometry_msgs/Point message instead. "
              },
              "y": {
                "type": "number",
                "description": "Property. "
              },
              "z": {
                "type": "number",
                "description": "Property. "
              }
            }
          }
        }
      },
      "desired_distance": {
        "type": "number",
        "description": "Property.  the desired translation distance "
      },
      "min_distance": {
        "type": "number",
        "description": "Property.  the min distance that must be considered feasible before the  grasp is even attempted "
      }
    }
  },
  "allowed_touch_objects": {
    "type": "array",
    "items": {
      "type": "string"
    }
  }
}