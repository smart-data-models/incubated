{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$schemaVersion": "0.0.1",
  "$id": "https://smart-data-models.github.io/dataModel.ZEB/DeviceForecast/schema.json",
  "title": "Smart Data Models - DeviceForecast schema",
  "description": "Information on DeviceForecast (Accuracy, controlled property, forecast value, etc.).",
  "modelTags": "Smart Building",
  "derivedFrom": "",
  "license": "https://smart-data-models.github.io/dataModel.ZEB/DeviceForecast/LICENSE.md",
  "type": "object",
  "allOf": [
    {
      "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/GSMA-Commons"
    },
    {
      "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/Location-Commons"
    },
    {
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DeviceForecast"
          ],
          "description": "Property. It must be equal to `DeviceForecast`."
        },
        "accuracy": {
          "type": "number",
          "minimum": 0,
          "description": "Property. Model:'https://schema.org/Number'. Accuracy of forecast of this item."
        },
        "controlledProperty": {
          "type": "string",
          "description": "Property. Controlled Property. Enum:'powermeter, temp, humidity, co2, radiation, windspeed, heatflow, solar, condensation, weight, pmv, weather, beacon, zeacon, illuminance, brilliance, occupancy, mic, co, pollen, formaldehyde, tvoc, radon, ozon, pm25, pm10, pressure'",
          "enum": [
            "powermeter",
            "temp",
            "humidity",
            "co2",
            "radiation",
            "windspeed",
            "heatflow",
            "solar",
            "condensation",
            "weight",
            "illuminance",
            "brilliance",
            "occupancy",
            "mic",
            "co",
            "pollen",
            "formaldehyde",
            "tvoc",
            "radon",
            "ozon",
            "pm25",
            "pm10",
            "pressure"
          ]
        },
        "dateIssued": {
          "type": "string",
          "format": "date-time",
          "description": "Property. Model:'http://schema.org/DateTime'. Date and time to run the simulation of this item."
        },
        "dateRetrieved": {
          "type": "string",
          "format": "date-time",
          "description": "Property. Model:'http://schema.org/DateTime'. Date and time to get simulation results of this item."
        },
        "dateWeatherStart": {
          "type": "string",
          "format": "date-time",
          "description": "Property. Model:'http://schema.org/DateTime'. Start date and time of weather forecast data or weather log used for simulation of this item."
        },
        "forecastValue": {
          "type": "number",
          "description": "Property. Model:'https://schema.org/Number'. Forecast value of the index."
        },
        "idWeather": {
          "type": "string",
          "description": "Property. ID of the weather station used for the forecast."
        },
        "outliter": {
          "type": "string",
          "description": "Property. Flag whether the simulation was successful or not"
        },
        "refDevice": {
          "type": "array",
          "description": "Relationship. Reference to the device containing this item.",
          "items": {
            "type": "string",
            "description": "Relationship. Reference to the device containing this item.",
            "minItems": 1,
            "uniqueItems": true
          }
        },
        "refSensor": {
          "type": "array",
          "description": "Relationship. Reference to the device containing this item.",
          "items": {
            "type": "string",
            "description": "Relationship. Reference to the device containing this item.",
            "minItems": 1,
            "uniqueItems": true
          }
        },
        "simName": {
          "type": "string",
          "description": "Property. Name of the simulation process."
        },
        "simProcess": {
          "type": "string",
          "description": "Property. Simulation process of this item."
        },
        "simFrom": {
          "type": "string",
          "format": "date-time",
          "description": "Property. Model:'http://schema.org/DateTime'. Start date and time of the simulation."
        },
        "simTo": {
          "type": "string",
          "format": "date-time",
          "description": "Property. Model:'http://schema.org/DateTime'. End date and time of the simulation."
        },
        "valueType": {
          "type": "string",
          "description": "Property. Value type. Enum:'eqInstantIn, eqInstantOut, eqCountIn, eqCountOut, eqDiffIn, eqDiffOut, oaInstantIn, oaInstantOut, oaCountIn, oaCountOut, oaDiffIn, oaDiffOut, normal, grobe'",
          "enum": [
            "eqInstantIn",
            "eqInstantOut",
            "eqCountIn",
            "eqCountOut",
            "eqDiffIn",
            "eqDiffOut",
            "oaInstantIn",
            "oaInstantOut",
            "oaCountIn",
            "oaCountOut",
            "oaDiffIn",
            "oaDiffOut",
            "normal",
            "grobe"
          ]
        }
      }
    }
  ],
  "required": [
    "id",
    "type"
  ]
}
