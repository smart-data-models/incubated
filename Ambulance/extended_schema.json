{
  '$schema': 'http://json-schema.org/schema#',
  '$schemaVersion': '0.0',
  '$id': 'https://smart-data-models.github.io/dataModel.Transportation/Vehicle/schema.json',
  'title': ' - ambulance - ',
  'description': 'This entity models a particular vehicle model, including all properties which are common to multiple vehicle instances belonging to such model.',
  'type': 'object',
  'allOf': [
    [
      {
        'type': 'object',
        'properties': {
          'id': {
            'anyOf': [
              {
                'type': 'string',
                'minLength': 1,
                'maxLength': 256,
                'pattern': '^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$',
                'description': 'Property. Identifier format of any NGSI entity'
              },
              {
                'type': 'string',
                'format': 'uri',
                'description': 'Property. Identifier format of any NGSI entity'
              }
            ],
            'description': 'Property. Unique identifier of the entity'
          },
          'dateCreated': {
            'type': 'string',
            'format': 'date-time',
            'description': 'Property. Entity creation timestamp. This will usually be allocated by the storage platform.'
          },
          'dateModified': {
            'type': 'string',
            'format': 'date-time',
            'description': 'Property. Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'
          },
          'source': {
            'type': 'string',
            'description': 'Property. A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'
          },
          'name': {
            'type': 'string',
            'description': 'Property. The name of this item.'
          },
          'alternateName': {
            'type': 'string',
            'description': 'Property. An alternative name for this item'
          },
          'description': {
            'type': 'string',
            'description': 'Property. A description of this item'
          },
          'dataProvider': {
            'type': 'string',
            'description': 'Property. A sequence of characters identifying the provider of the harmonised data entity.'
          },
          'owner': {
            'type': 'array',
            'description': 'Property. A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)',
            'items': {
              'anyOf': [
                {
                  'type': 'string',
                  'minLength': 1,
                  'maxLength': 256,
                  'pattern': '^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$',
                  'description': 'Property. Identifier format of any NGSI entity'
                },
                {
                  'type': 'string',
                  'format': 'uri',
                  'description': 'Property. Identifier format of any NGSI entity'
                }
              ],
              'description': 'Property. Unique identifier of the entity'
            }
          },
          'seeAlso': {
            'oneOf': [
              {
                'type': 'array',
                'minItems': 1,
                'items': [
                  {
                    'type': 'string',
                    'format': 'uri'
                  }
                ]
              },
              {
                'type': 'string',
                'format': 'uri'
              }
            ],
            'description': 'Property. list of uri pointing to additional resources about the item'
          }
        }
      },
      {
        'type': 'object',
        'properties': {
          'location': {
            '$schema': 'http://json-schema.org/draft-07/schema#',
            '$id': 'https://geojson.org/schema/Geometry.json',
            'title': 'GeoJSON Geometry',
            'oneOf': [
              {
                'title': 'GeoJSON Point',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'Point'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'minItems': 2,
                    'items': {
                      'type': 'number'
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              },
              {
                'title': 'GeoJSON LineString',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'LineString'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'minItems': 2,
                    'items': {
                      'type': 'array',
                      'minItems': 2,
                      'items': {
                        'type': 'number'
                      }
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              },
              {
                'title': 'GeoJSON Polygon',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'Polygon'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'items': {
                      'type': 'array',
                      'minItems': 4,
                      'items': {
                        'type': 'array',
                        'minItems': 2,
                        'items': {
                          'type': 'number'
                        }
                      }
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              },
              {
                'title': 'GeoJSON MultiPoint',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'MultiPoint'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'items': {
                      'type': 'array',
                      'minItems': 2,
                      'items': {
                        'type': 'number'
                      }
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              },
              {
                'title': 'GeoJSON MultiLineString',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'MultiLineString'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'items': {
                      'type': 'array',
                      'minItems': 2,
                      'items': {
                        'type': 'array',
                        'minItems': 2,
                        'items': {
                          'type': 'number'
                        }
                      }
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              },
              {
                'title': 'GeoJSON MultiPolygon',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'MultiPolygon'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'items': {
                      'type': 'array',
                      'items': {
                        'type': 'array',
                        'minItems': 4,
                        'items': {
                          'type': 'array',
                          'minItems': 2,
                          'items': {
                            'type': 'number'
                          }
                        }
                      }
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              }
            ]
          },
          'address': {
            'type': 'object',
            'description': "Property. The mailing address. Model:'https://schema.org/address'",
            'properties': {
              'streetAddress': {
                'type': 'string',
                'description': "Property. The street address. Model:'https://schema.org/streetAddress'"
              },
              'addressLocality': {
                'type': 'string',
                'description': "Property. The locality in which the street address is, and which is in the region. Model:'https://schema.org/addressLocality'"
              },
              'addressRegion': {
                'type': 'string',
                'description': "Property. The region in which the locality is, and which is in the country. Model:'https://schema.org/addressRegion'"
              },
              'addressCountry': {
                'type': 'string',
                'description': "Property. The country. For example, Spain. Model:'https://schema.org/addressCountry'"
              },
              'postalCode': {
                'type': 'string',
                'description': "Property. The postal code. For example, Spain. Model:'https://schema.org/https://schema.org/postalCode'"
              },
              'postOfficeBoxNumber': {
                'type': 'string',
                'description': "Property. The post office box number for PO box addresses. For example, Spain. Model:'https://schema.org/postOfficeBoxNumber'"
              },
              'areaServed': {
                'type': 'string',
                'description': "Property. The geographic area where a service or offered item is provided. Model:'https://schema.org/areaServed'"
              }
            }
          },
          'areaServed': {
            'type': 'string',
            'description': "Property. The geographic area where a service or offered item is provided. Model:'https://schema.org/Text'"
          }
        }
      },
      {
        'type': 'object',
        'properties': {
          'color': {
            'type': 'string',
            'description': "Property. The color of the product. Model:'https://schema.org/color'"
          },
          'image': {
            'type': 'string',
            'format': 'uri',
            'description': "Property. An image of the item. Model:'https://schema.org/URL'"
          },
          'annotations': {
            'type': 'array',
            'description': "Property. Annotations about the item. Model:'https://schema.org/Text'",
            'items': {
              'type': 'string'
            }
          }
        }
      },
      {
        'properties': {
          'type': {
            'type': 'string',
            'enum': [
              'Vehicle'
            ],
            'description': 'Property. NGSI Entity type. It has to be Vehicle'
          },
          'vehicleType': {
            'type': 'string',
            'description': "Property. Type of vehicle from the point of view of its structural characteristics. This is different than the vehicle category . Model:'https://schema.org/Text'. Enum:'agriculturalVehicle, anyVehicle, articulatedVehicle, bicycle, binTrolley, bus, car, caravan, carOrLightVehicle, carWithCaravan, carWithTrailer, cleaningTrolley, constructionOrMaintenanceVehicle, fourWheelDrive, highSidedVehicle, lorry, minibus, moped, motorcycle, motorcycleWithSideCar, motorscooter, sweepingMachine, tanker, threeWheeledVehicle, trailer, tram, twoWheeledVehicle, trolley, van, vehicleWithoutCatalyticConverter, vehicleWithCaravan, vehicleWithTrailer, withEvenNumberedRegistrationPlates, withOddNumberedRegistrationPlates, other'. The following values defined by _VehicleTypeEnum_ and _VehicleTypeEnum2_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/_static/umlmodel/v2.3/index.htm)",
            'enum': [
              'agriculturalVehicle',
              'anyVehicle',
              'articulatedVehicle',
              'bicycle',
              'binTrolley',
              'bus',
              'car',
              'caravan',
              'carOrLightVehicle',
              'carWithCaravan',
              'carWithTrailer',
              'cleaningTrolley',
              'constructionOrMaintenanceVehicle',
              'fourWheelDrive',
              'highSidedVehicle',
              'lorry',
              'minibus',
              'moped',
              'motorcycle',
              'motorcycleWithSideCar',
              'motorscooter',
              'sweepingMachine',
              'tanker',
              'threeWheeledVehicle',
              'trailer',
              'tram',
              'trolley',
              'twoWheeledVehicle',
              'van',
              'vehicleWithoutCatalyticConverter',
              'vehicleWithCaravan',
              'vehicleWithTrailer',
              'withEvenNumberedRegistrationPlates',
              'withOddNumberedRegistrationPlates',
              'other'
            ]
          },
          'category': {
            'type': 'array',
            'description': "Property. Vehicle category(ies) from an external point of view. This is different than the vehicle type (car, lorry, etc.) represented by the `vehicleType` property. Model:'https://schema.org/Text'. Enum:'municipalServices, nonTracked, private, public, specialUsage, tracked'. Tracked vehicles are those vehicles which position is permanently tracked by a remote system. Or any other needed by an application They incorporate a GPS receiver together with a network connection to periodically update a reported position (location, speed, heading ...).",
            'items': {
              'type': 'string',
              'enum': [
                'municipalServices',
                'nonTracked',
                'private',
                'public',
                'specialUsage',
                'tracked'
              ]
            }
          },
          'previousLocation': {
            '$schema': 'http://json-schema.org/draft-07/schema#',
            '$id': 'https://geojson.org/schema/Geometry.json',
            'title': 'GeoJSON Geometry',
            'oneOf': [
              {
                'title': 'GeoJSON Point',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'Point'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'minItems': 2,
                    'items': {
                      'type': 'number'
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              },
              {
                'title': 'GeoJSON LineString',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'LineString'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'minItems': 2,
                    'items': {
                      'type': 'array',
                      'minItems': 2,
                      'items': {
                        'type': 'number'
                      }
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              },
              {
                'title': 'GeoJSON Polygon',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'Polygon'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'items': {
                      'type': 'array',
                      'minItems': 4,
                      'items': {
                        'type': 'array',
                        'minItems': 2,
                        'items': {
                          'type': 'number'
                        }
                      }
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              },
              {
                'title': 'GeoJSON MultiPoint',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'MultiPoint'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'items': {
                      'type': 'array',
                      'minItems': 2,
                      'items': {
                        'type': 'number'
                      }
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              },
              {
                'title': 'GeoJSON MultiLineString',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'MultiLineString'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'items': {
                      'type': 'array',
                      'minItems': 2,
                      'items': {
                        'type': 'array',
                        'minItems': 2,
                        'items': {
                          'type': 'number'
                        }
                      }
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              },
              {
                'title': 'GeoJSON MultiPolygon',
                'type': 'object',
                'required': [
                  'type',
                  'coordinates'
                ],
                'properties': {
                  'type': {
                    'type': 'string',
                    'enum': [
                      'MultiPolygon'
                    ]
                  },
                  'coordinates': {
                    'type': 'array',
                    'items': {
                      'type': 'array',
                      'items': {
                        'type': 'array',
                        'minItems': 4,
                        'items': {
                          'type': 'array',
                          'minItems': 2,
                          'items': {
                            'type': 'number'
                          }
                        }
                      }
                    }
                  },
                  'bbox': {
                    'type': 'array',
                    'minItems': 4,
                    'items': {
                      'type': 'number'
                    }
                  }
                }
              }
            ]
          },
          'speed': {
            'oneOf': [
              {
                'type': 'number',
                'minimum': 0
              },
              {
                'type': 'number',
                'enum': [
                  -1
                ]
              }
            ],
            'description': "Property. Denotes the magnitude of the horizontal component of the vehicle's current velocity and is specified in Kilometers per Hour. If provided, the value of the speed attribute must be a non-negative real number. `-1` MAY be used if speed is transiently unknown for some reason. Model:'https://schema.org/Number'. Units:'Kilometer per hour (Km/h)'"
          },
          'heading': {
            'oneOf': [
              {
                'type': 'number',
                'minimum': 0,
                'maximum': 360
              },
              {
                'type': 'number',
                'const': -1
              }
            ],
            'description': "Property. Denotes the direction of travel of the vehicle and is specified in decimal degrees, where 0 <= `heading` < 360, counting clockwise relative to the true north. If the vehicle is stationary (i.e. the value of the `speed` attribute is `0`), then the value of the heading attribute must be equal to `-1`. Model:'https://schema.org/Number'. Units:'Kilometer per hour (Km/h)'"
          },
          'cargoWeight': {
            'type': 'number',
            'description': "Property. Current weight of the vehicle's cargo. Model:'https://schema.org/Number'. Units:'Kilograms'",
            'exclusiveMinimum': 0
          },
          'vehicleIdentificationNumber': {
            'type': 'string',
            'description': "Property. The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles. Model:'https://schema.org/vehicleIdentificationNumber'."
          },
          'vehiclePlateIdentifier': {
            'type': 'string',
            'description': "Property.  An identifier or code displayed on a vehicle registration plate attached to the vehicle used for official identification purposes. The registration identifier is numeric or alphanumeric and is unique within the issuing authority's region. Model:'https://schema.org/Text'. Normative References: DATEXII `vehicleRegistrationPlateIdentifier`"
          },
          'fleetVehicleId': {
            'type': 'string',
            'description': "Property. The identifier of the vehicle in the context of the fleet of vehicles to which it belongs. Model:'https://schema.org/Text'."
          },
          'dateVehicleFirstRegistered': {
            'type': 'string',
            'format': 'date',
            'description': "Property. The date of the first registration of the vehicle with the respective public authorities. Model:'https://schema.org/dateVehicleFirstRegistered'."
          },
          'dateFirstUsed': {
            'type': 'string',
            'format': 'date',
            'description': "Property. Timestamp which denotes when the vehicle was first used. Model:'https://schema.org/DateTime'."
          },
          'purchaseDate': {
            'type': 'string',
            'format': 'date-time',
            'description': "Property. The date the item e.g. vehicle was purchased by the current owner. Model:'https://schema.org/purchaseDate'."
          },
          'mileageFromOdometer': {
            'type': 'number',
            'description': "Property. The total distance travelled by the particular vehicle since its initial production, as read from its odometer. Model:'https://schema.org/mileageFromOdometer'."
          },
          'vehicleConfiguration': {
            'type': 'string',
            'description': "Property. A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'. Model:'https://schema.org/vehicleConfiguration'."
          },
          'color': {
            'type': 'string',
            'description': "Property. Vehicle's color. Model:'https://schema.org/color'."
          },
          'feature': {
            'type': 'array',
            'description': "Property. Feature(s) incorporated by the vehicle. Model:'https://schema.org/Text'. Enum:' abs, airbag, alarm, backCamera, disabledRamp, gps, internetConnection, overspeed, proximitySensor, wifi'. Or any other needed by the application. In order to represent multiple instances of a feature it can be used the following syntax: `<feature>,<occurences>`. For example, a car with 4 airbags will be represented by `airbag,4`.",
            'items': {
              'type': 'string',
              'enum': [
                'abs',
                'airbag',
                'alarm',
                'backCamera',
                'disabledRamp',
                'gps',
                'internetConnection',
                'overspeed',
                'proximitySensor',
                'wifi'
              ]
            }
          },
          'serviceProvided': {
            'type': 'array',
            'description': "Property. Service(s) the vehicle is capable of providing or it is assigned to. Model:'https://schema.org/Text'. Enum:'auxiliaryServices, cargoTransport, construction, fairground, garbageCollection, goodsSelling, maintenance, parksAndGardens, roadSignalling, specialTransport, streetCleaning, streetLighting, urbanTransit, wasteContainerCleaning'. Or any other value needed by an specific application.",
            'items': {
              'type': 'string',
              'enum': [
                'auxiliaryServices',
                'cargoTransport',
                'construction',
                'fairground',
                'garbageCollection',
                'goodsSelling',
                'maintenance',
                'parksAndGardens',
                'roadSignalling',
                'specialTransport',
                'streetCleaning',
                'streetLighting',
                'urbanTransit',
                'wasteContainerCleaning'
              ]
            }
          },
          'vehicleSpecialUsage': {
            'type': 'string',
            'description': "Property. Indicates whether the vehicle is been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale. Model:'https://schema.org/vehicleSpecialUsage'. Enum:'ambulance, fireBrigade, military, police, schoolTransportation, taxi'",
            'enum': [
              'ambulance',
              'fireBrigade',
              'military',
              'police',
              'schoolTransportation',
              'taxi'
            ]
          },
          'refVehicleModel': {
            'anyOf': [
              {
                'type': 'string',
                'minLength': 1,
                'maxLength': 256,
                'pattern': '^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$',
                'description': 'Property. Identifier format of any NGSI entity'
              },
              {
                'type': 'string',
                'format': 'uri',
                'description': 'Property. Identifier format of any NGSI entity'
              }
            ],
            'description': "Relationship. Model:'https://schema.org/URL'. Reference to a VehicleModel"
          },
          'serviceStatus': {
            'type': 'string',
            'description': "Property. Vehicle status (from the point of view of the service provided, so it could not apply to private vehicles). Model:'https://schema.org/DateTime'. `parked` : Vehicle is parked and not providing any service at the moment. `onRoute` : Vehicle is performing a mission. A comma-separated modifier(s) can be added to indicate what mission is currently delivering the vehicle. For instance `onRoute,garbageCollection` can be used to denote that the vehicle is on route and in a garbage collection mission. `broken` : Vehicle is suffering a temporary breakdown. `outOfService` : Vehicle is on the road but not performing any mission, probably going to its parking area. Enum:'broken, onRoute, outOfService, parked'",
            'enum': [
              'broken',
              'onRoute',
              'outOfService',
              'parked'
            ]
          }
        }
      }
    ],
    {
      'driver': {
        'type': 'string'
      },
      'patient': {
        'type': 'string'
      }
    }
  ]
}
